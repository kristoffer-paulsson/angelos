# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos/8"
  config.vm.box_version = "1905.1"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    sudo dnf check-update
    sudo dnf upgrade -y
    sudo dnf groupinstall "Development Tools" -y
    sudo dnf install nano git python38 python38-devel virtualenv -y
    sudo dnf install virtualenv -y
    sudo dnf install rpmdevtools -y

    # Install packages to alternative root
    # dnf install <package> -y --installroot=/opt/angelos --releasever=/ --nodeps

    sudo groupadd angelos
    sudo adduser angelos --system -g angelos

    sudo mkdir /opt/angelos
    sudo chown -R angelos:angelos /opt/angelos

    # Requires(pre): /usr/sbin/useradd, /usr/bin/getent
    # Requires(postun): /usr/sbin/userdel
    #
    # %pre
    # /usr/bin/getent group myservice > /dev/null || /usr/sbin/groupadd -r myservice
    # /usr/bin/getent passwd myservice > /dev/null || /usr/sbin/useradd -r -d /path/to/program -s /sbin/nologin -g myservice myservice

    # %postun
    # /usr/sbin/userdel myservice

    su - angelos

    virtualenv /opt/angelos -p /usr/bin/python3.8
    source /opt/angelos/bin/activate

    cd /opt/angelos
    mkdir tmp
    cd tmp

    git clone https://github.com/kristoffer-paulsson/angelos.git
    cd angelos
    git fetch --tags
    git checkout tags/1.0.0b1

    pip3.8 install -r requirements.txt
    python3.8 ./setup.py install

    # python3.8 ./setup.py develop
    # python3.8 ./setup.py install --prefix /opt/angelos
    # pip3.8 install --ignore-installed --install-option="--prefix=$PREFIX_PATH" <package_name>
    #   Where $PREFIX_PATH is a site-packages directory
    # PYTHONUSERBASE=/opt/angelos pip install --user --upgrade <package_name>

    ln -s /opt/angelos/bin/angelos /usr/local/bin/angelos


    # pip3.8 install -r requirements.txt --user
  SHELL
end
